{"version":3,"sources":["components/ButtonGroup.js","components/CalculatorForm.js","components/TotalDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonGroup","props","setTip","className","type","value","onClick","target","id","placeholder","onChange","CalculatorForm","bill","setBill","tip","split","setSplit","badBill","badSplit","hidden","step","required","TotalDisplay","handleReset","total","tipTotal","App","useState","setTotal","setTipTotal","setBadBill","setBadSplit","useEffect","billParse","parseFloat","toFixed","calculateTotal","calculateTip","isNaN","isFinite","e","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb7bdc79.chunk.js","sourcesContent":["import React from 'react'\n\nexport const ButtonGroup = (props) => {\n    const { setTip } = props\n\n    return (\n        <div className=\"tip-buttons\">\n            <input type=\"button\" value='0%'  onClick={({target}) => {setTip(target.value)}} />\n            <input type=\"button\" value='10%' onClick={({target}) => {setTip(target.value)}} />\n            <input type=\"button\" value='15%'  onClick={({target}) => {setTip(target.value)}} />\n            <input type=\"button\" value='20%'  onClick={({target}) => {setTip(target.value)}} />\n            <input type=\"button\" value='25%'  onClick={({target}) => {setTip(target.value)}} />\n            <input type=\"text\"      id=\"custom\" \n                                    placeholder=\"Custom\"\n                                    onChange={({target}) => {setTip(target.value)}} />\n        </div>\n    )\n}","import { ButtonGroup } from './ButtonGroup';\n\nexport const CalculatorForm = ({\n    bill,\n    setBill,\n    tip,\n    setTip,\n    split,\n    setSplit,\n    badBill,\n    badSplit\n}) => {\n    return (\n        <form className=\"calculator\"  >\n            <div className=\"input-title\">\n                <p>Bill</p>\n                <p className=\"warning\" hidden={!badBill}>Bill must be positive value.</p>\n            </div>\n            <input  className=\"bill-input\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={bill}\n                    onChange={({target}) => setBill(target.value)}\n                    required />\n            <p>Select Tip %</p>\n            <ButtonGroup\n                            tip={tip}\n                            setTip={setTip}\n                            required />\n            <div className=\"input-title\">\n                <p>Number of People</p>\n                <p className=\"warning\" hidden={!badSplit} >Split must be whole number &gt; 0.</p>\n            </div> \n            <input  className=\"split-input\"\n                    type=\"number\"\n                    value={split}\n                    onChange={({target}) => setSplit(target.value)}\n                    required />\n        </form>\n    )\n}","import React from 'react'\n\nexport const TotalDisplay = ({\n    handleReset,\n    total,\n    tipTotal\n}) => {\n    return (\n        <div className=\"display\">\n            <div className=\"total\">\n                <div className=\"info\">\n                    <p className=\"primary\">Tip Amount</p>\n                    <p className=\"secondary\">/ Person</p>\n                </div>\n                <p className=\"cost\">{tipTotal}</p> \n            </div>\n            <div className=\"total\">\n                <div className=\"info\">\n                    <p className=\"primary\">Total</p>\n                    <p className=\"secondary\">/ Person</p>\n                </div>\n                <p className=\"cost\">{total}</p>\n            </div>\n\n            <input type=\"button\" value=\"RESET\" onClick={handleReset} />\n        </div>\n    )\n}","import './App.css';\nimport {  useEffect, useState } from 'react';\nimport { CalculatorForm } from './components/CalculatorForm.js'\nimport { TotalDisplay } from './components/TotalDisplay'\n\nfunction App() {\n\n  //state\n  const [tip, setTip] = useState(0)\n  const [bill, setBill] = useState(0)\n  const [split, setSplit] = useState(1)\n  const [total, setTotal] = useState(0)\n  const [tipTotal, setTipTotal] = useState(0)\n  const [badBill, setBadBill] = useState(false)\n  const [badSplit, setBadSplit] = useState(false)\n\n  //calculates tip per person\n  const calculateTip = (bill, tip, split) => {\n    const billParse = parseFloat(bill)\n    const tipParse = parseFloat(tip)\n    const splitParse = parseFloat(split)\n    const tipPercent = tipParse / 100;\n    const tipPerPerson = (billParse * tipPercent) / splitParse\n    const dollars = tipPerPerson.toFixed(2)\n    return dollars\n  }\n\n  //calculates total per person\n  const calculateTotal = (bill, tip, split) => {\n    const billParse = parseFloat(bill)\n    const tipParse = parseFloat(tip)\n    const splitParse = parseFloat(split)\n    const tipPercent = tipParse / 100;\n    const totalPerPerson = (billParse + (billParse * tipPercent)) / splitParse\n    const dollars = totalPerPerson.toFixed(2)\n    return dollars\n  }\n\n\n  //resets inputs\n  const handleReset = (e) => {\n    e.preventDefault();\n\n    setTip(0);\n    setBill(0);\n    setSplit(1);\n\n  }\n\n  // tip and total update\n  //renders bill and split warnings\n  useEffect(() => {\n    setTotal(calculateTotal(bill, tip, split))\n    setTipTotal(calculateTip(bill, tip, split))\n    \n    if (bill < 0 || isNaN(bill)) {\n      setBadBill(true)\n    }\n\n    if (bill > 0) {\n      setBadBill(false)\n    }\n\n    if (split < 1 || split % 1 === 0){\n      setBadSplit(true)\n    }\n\n    if (split >= 1) {\n      setBadSplit(false)\n    }\n  }, [bill, tip, split])\n\n  useEffect(() => {\n    if (total < 0 || isNaN(total) || !isFinite(total)) {\n      setTotal(0)\n      setTipTotal(0)\n    }\n  }, [total, tipTotal])\n\n  return (\n    <div className=\"App\">\n      <h1>S P L I T T E R</h1>\n      <div className=\"container\" >\n        <CalculatorForm   \n                          tip={tip}\n                          bill={bill}\n                          split={split}\n                          setTip={setTip}\n                          setBill={setBill}\n                          setSplit={setSplit}\n                          badBill={badBill}\n                          badSplit={badSplit}/>\n        <TotalDisplay    \n                          handleReset={handleReset} \n                          total={total}\n                          tipTotal={tipTotal}/>\n      </div>    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}